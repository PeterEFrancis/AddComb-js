[null,{"code_content":"function has_block(board, a, b, c_plus_1, d_plus_1) {\n  let node;\n  let stack = [{rows: [], nxt: 0, curr: 2**b-1}];\n  while (stack.length > 0) {\n    node = stack.pop();\n    if (num_ones(node.curr) >= d_plus_1) { // otherwise, prune\n      if (node.rows.length >= c_plus_1)\n        return true;\n      if (node.rows.length + a - node.nxt < c_plus_1)\n     \t // no way to get c_plus_1 rows with this node, so prune\n        continue;\n      if (node.nxt < a) {\n        stack.push({\n          rows: [...node.rows, node.nxt],\n          nxt: node.nxt + 1,\n          curr: node.curr & board[node.nxt]\n        });\n        stack.push({\n          rows: [...node.rows],\n          nxt: node.nxt + 1,\n          curr: node.curr\n        });\n      }\n    }\n  }\n  return false;\n}\n\n\nfunction idx(lst, el) {\n  if (lst.includes(el)) {\n    return lst.indexOf(el);\n  } else {\n    return lst.length;\n  }\n}\n\nfunction new_board(a, b) {\n  let ret = [];\n\tfor (let i = 0; i < a; i++) {\n    ret.push(zeros(b));\n  }\n\treturn ret;\n}\n\nfunction count_ones(array) {\n\tlet n = 0;\n  for (let el of array) {\n  \tif (el == 1) {\n      n++;\n    }\n  }\n  return n;\n}\n\nfunction transpose(array) {\n  return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n}\n\nfunction sort_cols_by_num_ones(array) {\n  // transpose, sort rows, transpose back\n  array = transpose(array);\n  array.sort(function(a,b) {return count_ones(b) - count_ones(a)});\n  array = transpose(array);\n  return array;\n}\n\n// done in place\nfunction sort_rows_by_loc_of_first_one(array) {\n\tarray.sort(function(a,b) {return idx(a, 1) - idx(b, 1);});\n}\n\nfunction to_bits(array) {\n  return array.map((x,i) => x * 2 ** i);\n}\n\nfunction to_bit_list(array) {\n  return array.map(x => sum(to_bits(x)));\n}\n  \n\n\nfunction *get_boards_with_n(a, b, n) {\n  // get the axb boards with n 1s\n  for (let p of partitions(n, a, b)) {\n    let P = new Set();\n    let s = sum(to_bits(p));\n    for (let p2 of partitions(s, b, 2**a - 1)) {\n      let board = new_board(a, b);\n      for (let col = 0; col < p2.length; col++) {\n        let el = p2[col];\n        let r = 0;\n        while (el > 0) {\n          board[r][col] = el % 2;\n          el = Math.floor(el / 2);\n          r++;\n        }\n        // check to see if the board is ok w/r/t p\n        if (!arraysEqual(p, board.map(x => sum(x)))) continue;\n        // sort columns by number of 1s\n        board = sort_cols_by_num_ones(board);\n        // sort rows\n        sort_rows_by_loc_of_first_one(board);\n        // convert to bit board\n        let bit_board = to_bit_list(board);\n        // check if already returned\n        let str_bit_board = JSON.stringify(bit_board);\n        if (P.has(str_bit_board)){\n          continue;\n        } else {\n          P.add(str_bit_board);\n        }\n        // print(...board.map(x => JSON.stringify(x) + \"\\n\"));\n        yield bit_board;\n      }\n    }\n  }\n}\n\n\nfunction get_max_checkers(a, b, c, d) {\n  for (let n = 0; n < a * b; n++) {\n    // print('n:',n)\n    let found = false;\n    for (let board of get_boards_with_n(a, b, n)) {\n   \t\tif (!has_block(board, a, b, c+1, d+1)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n    \treturn n - 1;\n    }\n  }\n  return a * b - 1;\n}\n\nfunction old(a, b, c, d) {\n  return a * b - (a - c) * (b - d);\n}\n\n\n\n\n\nfor (let ab = 1; ab < 10; ab++) {\n  print('a=b=' + ab);\n  for (let cd = 0; cd < ab; cd++) {\n    let M = get_max_checkers(ab, ab, cd, cd);\n    let guess = old(ab, ab, cd, cd);\n    print('    c=d=' + cd + '    max=' + M + '   diff=' + (M - guess));  \n  }\n}","tag":" ","output_content":"a=b=1\n    c=d=0    max=0   diff=0\na=b=2\n    c=d=0    max=0   diff=0\n    c=d=1    max=3   diff=0\na=b=3\n    c=d=0    max=0   diff=0\n    c=d=1    max=6   diff=1\n    c=d=2    max=8   diff=0\na=b=4\n    c=d=0    max=0   diff=0\n    c=d=1    max=9   diff=2\n    c=d=2    max=13   diff=1\n    c=d=3    max=15   diff=0\na=b=5\n    c=d=0    max=0   diff=0\n    c=d=1    max=12   diff=3\n    c=d=2    max=20   diff=4\n    c=d=3    max=22   diff=1\n    c=d=4    max=24   diff=0\na=b=6\n    c=d=0    max=0   diff=0\n    c=d=1    max=16   diff=5\n","state":"normal"},{"code_content":"","tag":" ","output_content":"","state":"normal"}]