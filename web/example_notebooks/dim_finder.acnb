[null,{"code_content":"class DimFinder {\n  constructor(sizes) {\n    this.group = new Group(sizes);\n    this.B_dict = {};\n  }\n\n  is_dissociated(A) {\n    let key = A.contents;\n    if (!(key in this.B_dict)) {\n      this.B_dict[key] = A.is_dissociated(this.group.G);\n    }\n    return this.B_dict[key];\n  }\n\n  dim_A(A) {\n    for (let m = 1; m <= A.size(); m++) {\n      let found = false;\n      for (let subset of subsets(A, m)) {\n        if (this.is_dissociated(subset)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return m - 1;\n      }\n    }\n    return A.size();\n  }\n\n\n  dim(m) {\n    let minimum = this.group.n;\n    for (let A of this.group.each_set_exact(m)) {\n      minimum = Math.min(this.dim_A(A), minimum);\n      if (minimum == 1 || (minimum == 2 && m >=4)) {\n        break;\n      }\n    }\n    return minimum;\n  }\n\n  all_dim() {\n    for (let m = 1; m < this.group.n; m++) {\n      print(m, this.dim(m));\n    }\n  }\n\n}\n\n\n\nlet d = new Date();\n\nlet df = new DimFinder([10]);\nprint(df.all_dim());\n\nprint(\"elapsed:\", new Date() - d, \"ms\")","tag":" ","output_content":"1 0\n2 1\n3 1\n4 2\n5 2\n6 2\n7 2\n8 3\n9 3\n\nelapsed: 14 ms\n","state":"normal"},{"code_content":"","tag":" ","output_content":"","state":"normal"}]